// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: complex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_complex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_complex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_complex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_complex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_complex_2eproto;
namespace example {
namespace complex {
class ComplexMessage;
class ComplexMessageDefaultTypeInternal;
extern ComplexMessageDefaultTypeInternal _ComplexMessage_default_instance_;
class DummyMessage;
class DummyMessageDefaultTypeInternal;
extern DummyMessageDefaultTypeInternal _DummyMessage_default_instance_;
}  // namespace complex
}  // namespace example
PROTOBUF_NAMESPACE_OPEN
template<> ::example::complex::ComplexMessage* Arena::CreateMaybeMessage<::example::complex::ComplexMessage>(Arena*);
template<> ::example::complex::DummyMessage* Arena::CreateMaybeMessage<::example::complex::DummyMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace example {
namespace complex {

// ===================================================================

class ComplexMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.complex.ComplexMessage) */ {
 public:
  inline ComplexMessage() : ComplexMessage(nullptr) {};
  virtual ~ComplexMessage();

  ComplexMessage(const ComplexMessage& from);
  ComplexMessage(ComplexMessage&& from) noexcept
    : ComplexMessage() {
    *this = ::std::move(from);
  }

  inline ComplexMessage& operator=(const ComplexMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexMessage& operator=(ComplexMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComplexMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComplexMessage* internal_default_instance() {
    return reinterpret_cast<const ComplexMessage*>(
               &_ComplexMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComplexMessage& a, ComplexMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComplexMessage* New() const final {
    return CreateMaybeMessage<ComplexMessage>(nullptr);
  }

  ComplexMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComplexMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComplexMessage& from);
  void MergeFrom(const ComplexMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.complex.ComplexMessage";
  }
  protected:
  explicit ComplexMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_complex_2eproto);
    return ::descriptor_table_complex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultipleDummyFieldNumber = 3,
    kOneDummyFieldNumber = 2,
  };
  // repeated .example.complex.DummyMessage multiple_dummy = 3;
  int multiple_dummy_size() const;
  private:
  int _internal_multiple_dummy_size() const;
  public:
  void clear_multiple_dummy();
  ::example::complex::DummyMessage* mutable_multiple_dummy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::complex::DummyMessage >*
      mutable_multiple_dummy();
  private:
  const ::example::complex::DummyMessage& _internal_multiple_dummy(int index) const;
  ::example::complex::DummyMessage* _internal_add_multiple_dummy();
  public:
  const ::example::complex::DummyMessage& multiple_dummy(int index) const;
  ::example::complex::DummyMessage* add_multiple_dummy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::complex::DummyMessage >&
      multiple_dummy() const;

  // .example.complex.DummyMessage one_dummy = 2;
  bool has_one_dummy() const;
  private:
  bool _internal_has_one_dummy() const;
  public:
  void clear_one_dummy();
  const ::example::complex::DummyMessage& one_dummy() const;
  ::example::complex::DummyMessage* release_one_dummy();
  ::example::complex::DummyMessage* mutable_one_dummy();
  void set_allocated_one_dummy(::example::complex::DummyMessage* one_dummy);
  private:
  const ::example::complex::DummyMessage& _internal_one_dummy() const;
  ::example::complex::DummyMessage* _internal_mutable_one_dummy();
  public:
  void unsafe_arena_set_allocated_one_dummy(
      ::example::complex::DummyMessage* one_dummy);
  ::example::complex::DummyMessage* unsafe_arena_release_one_dummy();

  // @@protoc_insertion_point(class_scope:example.complex.ComplexMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::complex::DummyMessage > multiple_dummy_;
  ::example::complex::DummyMessage* one_dummy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_complex_2eproto;
};
// -------------------------------------------------------------------

class DummyMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.complex.DummyMessage) */ {
 public:
  inline DummyMessage() : DummyMessage(nullptr) {};
  virtual ~DummyMessage();

  DummyMessage(const DummyMessage& from);
  DummyMessage(DummyMessage&& from) noexcept
    : DummyMessage() {
    *this = ::std::move(from);
  }

  inline DummyMessage& operator=(const DummyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyMessage& operator=(DummyMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DummyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DummyMessage* internal_default_instance() {
    return reinterpret_cast<const DummyMessage*>(
               &_DummyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DummyMessage& a, DummyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DummyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DummyMessage* New() const final {
    return CreateMaybeMessage<DummyMessage>(nullptr);
  }

  DummyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DummyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DummyMessage& from);
  void MergeFrom(const DummyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DummyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.complex.DummyMessage";
  }
  protected:
  explicit DummyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_complex_2eproto);
    return ::descriptor_table_complex_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:example.complex.DummyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_complex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComplexMessage

// .example.complex.DummyMessage one_dummy = 2;
inline bool ComplexMessage::_internal_has_one_dummy() const {
  return this != internal_default_instance() && one_dummy_ != nullptr;
}
inline bool ComplexMessage::has_one_dummy() const {
  return _internal_has_one_dummy();
}
inline void ComplexMessage::clear_one_dummy() {
  if (GetArena() == nullptr && one_dummy_ != nullptr) {
    delete one_dummy_;
  }
  one_dummy_ = nullptr;
}
inline const ::example::complex::DummyMessage& ComplexMessage::_internal_one_dummy() const {
  const ::example::complex::DummyMessage* p = one_dummy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::example::complex::DummyMessage*>(
      &::example::complex::_DummyMessage_default_instance_);
}
inline const ::example::complex::DummyMessage& ComplexMessage::one_dummy() const {
  // @@protoc_insertion_point(field_get:example.complex.ComplexMessage.one_dummy)
  return _internal_one_dummy();
}
inline void ComplexMessage::unsafe_arena_set_allocated_one_dummy(
    ::example::complex::DummyMessage* one_dummy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(one_dummy_);
  }
  one_dummy_ = one_dummy;
  if (one_dummy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.complex.ComplexMessage.one_dummy)
}
inline ::example::complex::DummyMessage* ComplexMessage::release_one_dummy() {
  auto temp = unsafe_arena_release_one_dummy();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::example::complex::DummyMessage* ComplexMessage::unsafe_arena_release_one_dummy() {
  // @@protoc_insertion_point(field_release:example.complex.ComplexMessage.one_dummy)
  
  ::example::complex::DummyMessage* temp = one_dummy_;
  one_dummy_ = nullptr;
  return temp;
}
inline ::example::complex::DummyMessage* ComplexMessage::_internal_mutable_one_dummy() {
  
  if (one_dummy_ == nullptr) {
    auto* p = CreateMaybeMessage<::example::complex::DummyMessage>(GetArena());
    one_dummy_ = p;
  }
  return one_dummy_;
}
inline ::example::complex::DummyMessage* ComplexMessage::mutable_one_dummy() {
  // @@protoc_insertion_point(field_mutable:example.complex.ComplexMessage.one_dummy)
  return _internal_mutable_one_dummy();
}
inline void ComplexMessage::set_allocated_one_dummy(::example::complex::DummyMessage* one_dummy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete one_dummy_;
  }
  if (one_dummy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(one_dummy);
    if (message_arena != submessage_arena) {
      one_dummy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one_dummy, submessage_arena);
    }
    
  } else {
    
  }
  one_dummy_ = one_dummy;
  // @@protoc_insertion_point(field_set_allocated:example.complex.ComplexMessage.one_dummy)
}

// repeated .example.complex.DummyMessage multiple_dummy = 3;
inline int ComplexMessage::_internal_multiple_dummy_size() const {
  return multiple_dummy_.size();
}
inline int ComplexMessage::multiple_dummy_size() const {
  return _internal_multiple_dummy_size();
}
inline void ComplexMessage::clear_multiple_dummy() {
  multiple_dummy_.Clear();
}
inline ::example::complex::DummyMessage* ComplexMessage::mutable_multiple_dummy(int index) {
  // @@protoc_insertion_point(field_mutable:example.complex.ComplexMessage.multiple_dummy)
  return multiple_dummy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::complex::DummyMessage >*
ComplexMessage::mutable_multiple_dummy() {
  // @@protoc_insertion_point(field_mutable_list:example.complex.ComplexMessage.multiple_dummy)
  return &multiple_dummy_;
}
inline const ::example::complex::DummyMessage& ComplexMessage::_internal_multiple_dummy(int index) const {
  return multiple_dummy_.Get(index);
}
inline const ::example::complex::DummyMessage& ComplexMessage::multiple_dummy(int index) const {
  // @@protoc_insertion_point(field_get:example.complex.ComplexMessage.multiple_dummy)
  return _internal_multiple_dummy(index);
}
inline ::example::complex::DummyMessage* ComplexMessage::_internal_add_multiple_dummy() {
  return multiple_dummy_.Add();
}
inline ::example::complex::DummyMessage* ComplexMessage::add_multiple_dummy() {
  // @@protoc_insertion_point(field_add:example.complex.ComplexMessage.multiple_dummy)
  return _internal_add_multiple_dummy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::complex::DummyMessage >&
ComplexMessage::multiple_dummy() const {
  // @@protoc_insertion_point(field_list:example.complex.ComplexMessage.multiple_dummy)
  return multiple_dummy_;
}

// -------------------------------------------------------------------

// DummyMessage

// int32 id = 1;
inline void DummyMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DummyMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DummyMessage::id() const {
  // @@protoc_insertion_point(field_get:example.complex.DummyMessage.id)
  return _internal_id();
}
inline void DummyMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DummyMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:example.complex.DummyMessage.id)
}

// string name = 2;
inline void DummyMessage::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DummyMessage::name() const {
  // @@protoc_insertion_point(field_get:example.complex.DummyMessage.name)
  return _internal_name();
}
inline void DummyMessage::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:example.complex.DummyMessage.name)
}
inline std::string* DummyMessage::mutable_name() {
  // @@protoc_insertion_point(field_mutable:example.complex.DummyMessage.name)
  return _internal_mutable_name();
}
inline const std::string& DummyMessage::_internal_name() const {
  return name_.Get();
}
inline void DummyMessage::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DummyMessage::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.complex.DummyMessage.name)
}
inline void DummyMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.complex.DummyMessage.name)
}
inline void DummyMessage::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.complex.DummyMessage.name)
}
inline std::string* DummyMessage::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DummyMessage::release_name() {
  // @@protoc_insertion_point(field_release:example.complex.DummyMessage.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DummyMessage::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.complex.DummyMessage.name)
}
inline std::string* DummyMessage::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:example.complex.DummyMessage.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DummyMessage::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:example.complex.DummyMessage.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace complex
}  // namespace example

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_complex_2eproto
